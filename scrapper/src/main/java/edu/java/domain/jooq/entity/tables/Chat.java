/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.entity.tables;


import edu.java.domain.jooq.entity.DefaultSchema;
import edu.java.domain.jooq.entity.Keys;
import edu.java.domain.jooq.entity.tables.Linkschats.LinkschatsPath;
import edu.java.domain.jooq.entity.tables.records.ChatRecord;

import java.time.OffsetDateTime;
import java.util.Collection;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Chat extends TableImpl<ChatRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>CHAT</code>
     */
    public static final Chat CHAT = new Chat();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<ChatRecord> getRecordType() {
        return ChatRecord.class;
    }

    /**
     * The column <code>CHAT.TG_CHAT_ID</code>.
     */
    public final TableField<ChatRecord, Long> TG_CHAT_ID = createField(DSL.name("TG_CHAT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>CHAT.STATE</code>.
     */
    public final TableField<ChatRecord, Integer> STATE = createField(DSL.name("STATE"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>CHAT.LAST_UPDATE_AT</code>.
     */
    public final TableField<ChatRecord, OffsetDateTime> LAST_UPDATE_AT = createField(DSL.name("LAST_UPDATE_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private Chat(Name alias, Table<ChatRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Chat(Name alias, Table<ChatRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>CHAT</code> table reference
     */
    public Chat(String alias) {
        this(DSL.name(alias), CHAT);
    }

    /**
     * Create an aliased <code>CHAT</code> table reference
     */
    public Chat(Name alias) {
        this(alias, CHAT);
    }

    /**
     * Create a <code>CHAT</code> table reference
     */
    public Chat() {
        this(DSL.name("CHAT"), null);
    }

    public <O extends Record> Chat(Table<O> path, ForeignKey<O, ChatRecord> childPath, InverseForeignKey<O, ChatRecord> parentPath) {
        super(path, childPath, parentPath, CHAT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ChatPath extends Chat implements Path<ChatRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ChatPath(Table<O> path, ForeignKey<O, ChatRecord> childPath, InverseForeignKey<O, ChatRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ChatPath(Name alias, Table<ChatRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ChatPath as(String alias) {
            return new ChatPath(DSL.name(alias), this);
        }

        @Override
        public ChatPath as(Name alias) {
            return new ChatPath(alias, this);
        }

        @Override
        public ChatPath as(Table<?> alias) {
            return new ChatPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public UniqueKey<ChatRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_1;
    }

    private transient LinkschatsPath _linkschats;

    /**
     * Get the implicit to-many join path to the <code>PUBLIC.LINKSCHATS</code>
     * table
     */
    public LinkschatsPath linkschats() {
        if (_linkschats == null)
            _linkschats = new LinkschatsPath(this, null, Keys.CONSTRAINT_84.getInverseKey());

        return _linkschats;
    }

    @Override
    @NotNull
    public Chat as(String alias) {
        return new Chat(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public Chat as(Name alias) {
        return new Chat(alias, this);
    }

    @Override
    @NotNull
    public Chat as(Table<?> alias) {
        return new Chat(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Chat rename(String name) {
        return new Chat(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Chat rename(Name name) {
        return new Chat(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Chat rename(Table<?> name) {
        return new Chat(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Chat where(Condition condition) {
        return new Chat(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Chat where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Chat where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Chat where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Chat where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Chat where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Chat where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Chat where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Chat whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Chat whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
