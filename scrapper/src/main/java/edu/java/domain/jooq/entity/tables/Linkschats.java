/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.entity.tables;


import edu.java.domain.jooq.entity.DefaultSchema;
import edu.java.domain.jooq.entity.Keys;
import edu.java.domain.jooq.entity.tables.Chat.ChatPath;
import edu.java.domain.jooq.entity.tables.Link.LinkPath;
import edu.java.domain.jooq.entity.tables.records.LinkschatsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Linkschats extends TableImpl<LinkschatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LINKSCHATS</code>
     */
    public static final Linkschats LINKSCHATS = new Linkschats();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<LinkschatsRecord> getRecordType() {
        return LinkschatsRecord.class;
    }

    /**
     * The column <code>LINKSCHATS.ID</code>.
     */
    public final TableField<LinkschatsRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>LINKSCHATS.URL_ID</code>.
     */
    public final TableField<LinkschatsRecord, Long> URL_ID = createField(DSL.name("URL_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>LINKSCHATS.TG_CHAT_ID</code>.
     */
    public final TableField<LinkschatsRecord, Long> TG_CHAT_ID = createField(DSL.name("TG_CHAT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private Linkschats(Name alias, Table<LinkschatsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Linkschats(Name alias, Table<LinkschatsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>LINKSCHATS</code> table reference
     */
    public Linkschats(String alias) {
        this(DSL.name(alias), LINKSCHATS);
    }

    /**
     * Create an aliased <code>LINKSCHATS</code> table reference
     */
    public Linkschats(Name alias) {
        this(alias, LINKSCHATS);
    }

    /**
     * Create a <code>LINKSCHATS</code> table reference
     */
    public Linkschats() {
        this(DSL.name("LINKSCHATS"), null);
    }

    public <O extends Record> Linkschats(Table<O> path, ForeignKey<O, LinkschatsRecord> childPath, InverseForeignKey<O, LinkschatsRecord> parentPath) {
        super(path, childPath, parentPath, LINKSCHATS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LinkschatsPath extends Linkschats implements Path<LinkschatsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LinkschatsPath(Table<O> path, ForeignKey<O, LinkschatsRecord> childPath, InverseForeignKey<O, LinkschatsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LinkschatsPath(Name alias, Table<LinkschatsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LinkschatsPath as(String alias) {
            return new LinkschatsPath(DSL.name(alias), this);
        }

        @Override
        public LinkschatsPath as(Name alias) {
            return new LinkschatsPath(alias, this);
        }

        @Override
        public LinkschatsPath as(Table<?> alias) {
            return new LinkschatsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public Identity<LinkschatsRecord, Long> getIdentity() {
        return (Identity<LinkschatsRecord, Long>) super.getIdentity();
    }

    @Override
    @NotNull
    public List<ForeignKey<LinkschatsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_8, Keys.CONSTRAINT_84);
    }

    private transient LinkPath _link;

    /**
     * Get the implicit join path to the <code>PUBLIC.LINK</code> table.
     */
    public LinkPath link() {
        if (_link == null)
            _link = new LinkPath(this, Keys.CONSTRAINT_8, null);

        return _link;
    }

    private transient ChatPath _chat;

    /**
     * Get the implicit join path to the <code>PUBLIC.CHAT</code> table.
     */
    public ChatPath chat() {
        if (_chat == null)
            _chat = new ChatPath(this, Keys.CONSTRAINT_84, null);

        return _chat;
    }

    @Override
    @NotNull
    public Linkschats as(String alias) {
        return new Linkschats(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public Linkschats as(Name alias) {
        return new Linkschats(alias, this);
    }

    @Override
    @NotNull
    public Linkschats as(Table<?> alias) {
        return new Linkschats(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Linkschats rename(String name) {
        return new Linkschats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Linkschats rename(Name name) {
        return new Linkschats(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Linkschats rename(Table<?> name) {
        return new Linkschats(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Linkschats where(Condition condition) {
        return new Linkschats(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Linkschats where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Linkschats where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Linkschats where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Linkschats where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Linkschats where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Linkschats where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Linkschats where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Linkschats whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Linkschats whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
